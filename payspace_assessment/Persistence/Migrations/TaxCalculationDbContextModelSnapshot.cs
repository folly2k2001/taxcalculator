// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DatabaseContext;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(TaxCalculationDbContext))]
    partial class TaxCalculationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.CalculatedTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AnnualIncome")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CalculatedTaxes");
                });

            modelBuilder.Entity("Domain.PostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PostalCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "7441",
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9768),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9772)
                        },
                        new
                        {
                            Id = 2,
                            Code = "A100",
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9774),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9774)
                        },
                        new
                        {
                            Id = 3,
                            Code = "7000",
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9775),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9776)
                        },
                        new
                        {
                            Id = 4,
                            Code = "1000",
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9777),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(9777)
                        });
                });

            modelBuilder.Entity("Domain.PostalCode_TaxCalculationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaxCalculationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "TaxCalculationTypeId", "PostalCodeId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("TaxCalculationTypeId");

                    b.ToTable("PostalCode_TaxCalculationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaxCalculationTypeId = 1,
                            PostalCodeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4296),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4312)
                        },
                        new
                        {
                            Id = 2,
                            TaxCalculationTypeId = 2,
                            PostalCodeId = 2,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4314),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4314)
                        },
                        new
                        {
                            Id = 3,
                            TaxCalculationTypeId = 3,
                            PostalCodeId = 3,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4315),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4316)
                        },
                        new
                        {
                            Id = 4,
                            TaxCalculationTypeId = 1,
                            PostalCodeId = 4,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4317),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 855, DateTimeKind.Local).AddTicks(4318)
                        });
                });

            modelBuilder.Entity("Domain.TaxCalculationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TaxCalculationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1015),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1017),
                            Type = "Progressive"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1019),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1020),
                            Type = "Flat Value"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1021),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(1021),
                            Type = "Flat Rate"
                        });
                });

            modelBuilder.Entity("Domain.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("FlatValue")
                        .HasColumnType("float");

                    b.Property<double>("From")
                        .HasColumnType("float");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("To")
                        .HasColumnType("float");

                    b.Property<bool>("isFlate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CalculationTypeId");

                    b.ToTable("TaxRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2623),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2627),
                            FlatValue = 0.0,
                            From = 0.0,
                            Rate = 0.10000000000000001,
                            To = 8350.0,
                            isFlate = false
                        },
                        new
                        {
                            Id = 2,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2629),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2630),
                            FlatValue = 0.0,
                            From = 8351.0,
                            Rate = 0.14999999999999999,
                            To = 33950.0,
                            isFlate = false
                        },
                        new
                        {
                            Id = 3,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2656),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2656),
                            FlatValue = 0.0,
                            From = 33951.0,
                            Rate = 0.25,
                            To = 82250.0,
                            isFlate = false
                        },
                        new
                        {
                            Id = 4,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2660),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2661),
                            FlatValue = 0.0,
                            From = 82251.0,
                            Rate = 0.28000000000000003,
                            To = 171550.0,
                            isFlate = false
                        },
                        new
                        {
                            Id = 5,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2663),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2664),
                            FlatValue = 0.0,
                            From = 171551.0,
                            Rate = 0.33000000000000002,
                            To = 372950.0,
                            isFlate = false
                        },
                        new
                        {
                            Id = 6,
                            CalculationTypeId = 1,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2666),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2667),
                            FlatValue = 0.0,
                            From = 372951.0,
                            Rate = 0.34999999999999998,
                            To = 1.7976931348623157E+308,
                            isFlate = false
                        },
                        new
                        {
                            Id = 7,
                            CalculationTypeId = 2,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2670),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2670),
                            FlatValue = 10000.0,
                            From = 200000.0,
                            Rate = 0.0,
                            To = 1.7976931348623157E+308,
                            isFlate = true
                        },
                        new
                        {
                            Id = 8,
                            CalculationTypeId = 2,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2674),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2674),
                            FlatValue = 0.0,
                            From = 0.0,
                            Rate = 0.050000000000000003,
                            To = 199999.0,
                            isFlate = true
                        },
                        new
                        {
                            Id = 9,
                            CalculationTypeId = 3,
                            DateCreated = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2676),
                            DateModified = new DateTime(2023, 5, 14, 15, 46, 47, 856, DateTimeKind.Local).AddTicks(2677),
                            FlatValue = 0.0,
                            From = 0.0,
                            Rate = 0.17499999999999999,
                            To = 0.0,
                            isFlate = true
                        });
                });

            modelBuilder.Entity("Domain.PostalCode_TaxCalculationType", b =>
                {
                    b.HasOne("Domain.PostalCode", "PostalCode")
                        .WithMany("PostalCode_TaxCalculationTypes")
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TaxCalculationType", "TaxCalculationType")
                        .WithMany("PostalCode_TaxCalculationTypes")
                        .HasForeignKey("TaxCalculationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCode");

                    b.Navigation("TaxCalculationType");
                });

            modelBuilder.Entity("Domain.TaxRate", b =>
                {
                    b.HasOne("Domain.TaxCalculationType", "CalculationType")
                        .WithMany("Rates")
                        .HasForeignKey("CalculationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculationType");
                });

            modelBuilder.Entity("Domain.PostalCode", b =>
                {
                    b.Navigation("PostalCode_TaxCalculationTypes");
                });

            modelBuilder.Entity("Domain.TaxCalculationType", b =>
                {
                    b.Navigation("PostalCode_TaxCalculationTypes");

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
